type Query {
  hello: String
  getCurrentUser: User
  getAllPosts: [Post]
  getPostDetails(slug: String!): PostDetails
  getAllUsers: [User]
  getAllComments: [Comment]
  getPostComments(postId: String!): [Comment]
  healthCheck: String
  #Reactions
  getPostReactions(postId: String!): SuccessReactionResults
}

type Mutation {
  #posts
  createPost(input: CreatePostInput!): SuccessResults
  incrementPageView(postId: String): SuccessResults
  #comments
  createComment(input: CreateCommentInput!): SuccessResults
  deleteComment(input: ItemId!): SuccessResults
  #Reactions
  addReaction(input: AddReactionInput!): SuccessResults!
}
input AddReactionInput {
  userId: String!
  postId: String!
  reactionType: ReactionType!
}
input ItemId {
  id: String!
}

input CreateCommentInput {
  body: String!
  userId: String!
  postId: String!
}

input CreatePostInput {
  title: String!
  body: String!
  slug: String!
  author: String!
}
type SuccessReactionResults {
  success: Boolean!
  message: String
  data: [ReactionCount]
}

type SuccessResults {
  success: Boolean!
  message: String
}
type ReactionCount {
  reactionType: ReactionType!
  count: Int
}
type User {
  id: ID!
  name: String
  email: String
  image: String
  gender: String
}

type Post {
  id: ID!
  title: String
  slug: String
  body: String
  views: Int
  published: Boolean
  createdAt: String
  updatedAt: String
  comments: [Comment]
  _count: CommentCount
  reactions: [Reaction!]!
  lovePost: Int
  hatePost: Int
}
type CommentCount {
  comments: Int
}
type PostDetails {
  id: ID!
  title: String
  slug: String
  body: String
  views: Int
  published: Boolean
  createdAt: String
  updatedAt: String
  comments: [Comment]
  user: User
  reactions: [Reaction]!
}

type Comment {
  id: ID!
  body: String
  createdAt: String
  updatedAt: String
  user: User
  postId: String
}

type Reaction {
  id: ID!
  reactionType: ReactionType!
  post: Post!
  postId: String!
  user: User!
  userId: Int!
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  HATE
  HAPPY
  SAD
  INTERESTING
  BORING
}
